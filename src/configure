#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

directory '/data/var/db/unfs' do
  recursive true
end

# chown /data/var/db/unfs for gonano
execute 'chown /data/var/db/unfs' do
  command 'chown -R gonano:gonano /data/var/db/unfs'
end

file '/data/etc/exports' do
  mode 0644
  owner 'gonano'
  group 'gonano'
  content <<-EOF
/data/var/db/unfs 0.0.0.0/0(rw,no_root_squash,insecure)
  EOF
end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gonano/etc/narc.conf' do
    variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
  end

  directory '/etc/service/narc'

  template '/etc/service/narc/run' do
    mode 0755
    source 'run-root.erb'
    variables ({ exec: "/opt/gonano/bin/narcd /opt/gonano/etc/narc.conf" })
  end
end

payload[:users].each do |user|
  execute "echo \"#{user[:username]}:#{user[:password]}\" | chpasswd"
end

# Create some ssh host keys
execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
  not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_rsa_key' }
end

execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
  not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_dsa_key' }
end

execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
  not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ecdsa_key' }
end

execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
  not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ed25519_key' }
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

end
